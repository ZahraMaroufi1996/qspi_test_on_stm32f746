
qspi_setup _on_stm32f746.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003328  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003500  08003500  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003500  08003500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003508  08003508  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003508  08003508  00013508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  0800351c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  0800351c  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009466  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9f  00000000  00000000  000294a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002af48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  0002b690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253ef  00000000  00000000  0002bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009150  00000000  00000000  000510ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4b62  00000000  00000000  0005a23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013eda1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc8  00000000  00000000  0013edf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080034d8 	.word	0x080034d8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080034d8 	.word	0x080034d8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b090      	sub	sp, #64	; 0x40
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000516:	4bad      	ldr	r3, [pc, #692]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4aac      	ldr	r2, [pc, #688]	; (80007cc <MX_GPIO_Init+0x2cc>)
 800051c:	f043 0310 	orr.w	r3, r3, #16
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4baa      	ldr	r3, [pc, #680]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0310 	and.w	r3, r3, #16
 800052a:	62bb      	str	r3, [r7, #40]	; 0x28
 800052c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800052e:	4ba7      	ldr	r3, [pc, #668]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4aa6      	ldr	r2, [pc, #664]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4ba4      	ldr	r3, [pc, #656]	; (80007cc <MX_GPIO_Init+0x2cc>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000542:	627b      	str	r3, [r7, #36]	; 0x24
 8000544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4ba1      	ldr	r3, [pc, #644]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4aa0      	ldr	r2, [pc, #640]	; (80007cc <MX_GPIO_Init+0x2cc>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b9e      	ldr	r3, [pc, #632]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	623b      	str	r3, [r7, #32]
 800055c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055e:	4b9b      	ldr	r3, [pc, #620]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a9a      	ldr	r2, [pc, #616]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b98      	ldr	r3, [pc, #608]	; (80007cc <MX_GPIO_Init+0x2cc>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0308 	and.w	r3, r3, #8
 8000572:	61fb      	str	r3, [r7, #28]
 8000574:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b95      	ldr	r3, [pc, #596]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a94      	ldr	r2, [pc, #592]	; (80007cc <MX_GPIO_Init+0x2cc>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b92      	ldr	r3, [pc, #584]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	61bb      	str	r3, [r7, #24]
 800058c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b8f      	ldr	r3, [pc, #572]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a8e      	ldr	r2, [pc, #568]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b8c      	ldr	r3, [pc, #560]	; (80007cc <MX_GPIO_Init+0x2cc>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80005a6:	4b89      	ldr	r3, [pc, #548]	; (80007cc <MX_GPIO_Init+0x2cc>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a88      	ldr	r2, [pc, #544]	; (80007cc <MX_GPIO_Init+0x2cc>)
 80005ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b86      	ldr	r3, [pc, #536]	; (80007cc <MX_GPIO_Init+0x2cc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005be:	4b83      	ldr	r3, [pc, #524]	; (80007cc <MX_GPIO_Init+0x2cc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a82      	ldr	r2, [pc, #520]	; (80007cc <MX_GPIO_Init+0x2cc>)
 80005c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b80      	ldr	r3, [pc, #512]	; (80007cc <MX_GPIO_Init+0x2cc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80005d6:	4b7d      	ldr	r3, [pc, #500]	; (80007cc <MX_GPIO_Init+0x2cc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a7c      	ldr	r2, [pc, #496]	; (80007cc <MX_GPIO_Init+0x2cc>)
 80005dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b7a      	ldr	r3, [pc, #488]	; (80007cc <MX_GPIO_Init+0x2cc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ee:	4b77      	ldr	r3, [pc, #476]	; (80007cc <MX_GPIO_Init+0x2cc>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a76      	ldr	r2, [pc, #472]	; (80007cc <MX_GPIO_Init+0x2cc>)
 80005f4:	f043 0320 	orr.w	r3, r3, #32
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b74      	ldr	r3, [pc, #464]	; (80007cc <MX_GPIO_Init+0x2cc>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	4b71      	ldr	r3, [pc, #452]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a70      	ldr	r2, [pc, #448]	; (80007cc <MX_GPIO_Init+0x2cc>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b6e      	ldr	r3, [pc, #440]	; (80007cc <MX_GPIO_Init+0x2cc>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2120      	movs	r1, #32
 8000622:	486b      	ldr	r0, [pc, #428]	; (80007d0 <MX_GPIO_Init+0x2d0>)
 8000624:	f001 fd34 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f241 010a 	movw	r1, #4106	; 0x100a
 800062e:	4869      	ldr	r0, [pc, #420]	; (80007d4 <MX_GPIO_Init+0x2d4>)
 8000630:	f001 fd2e 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2108      	movs	r1, #8
 8000638:	4867      	ldr	r0, [pc, #412]	; (80007d8 <MX_GPIO_Init+0x2d8>)
 800063a:	f001 fd29 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000644:	4865      	ldr	r0, [pc, #404]	; (80007dc <MX_GPIO_Init+0x2dc>)
 8000646:	f001 fd23 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	21c8      	movs	r1, #200	; 0xc8
 800064e:	4864      	ldr	r0, [pc, #400]	; (80007e0 <MX_GPIO_Init+0x2e0>)
 8000650:	f001 fd1e 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000654:	2310      	movs	r3, #16
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000664:	230e      	movs	r3, #14
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800066c:	4619      	mov	r1, r3
 800066e:	485d      	ldr	r0, [pc, #372]	; (80007e4 <MX_GPIO_Init+0x2e4>)
 8000670:	f001 fa56 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000674:	2308      	movs	r3, #8
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000684:	4619      	mov	r1, r3
 8000686:	4857      	ldr	r0, [pc, #348]	; (80007e4 <MX_GPIO_Init+0x2e4>)
 8000688:	f001 fa4a 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800068c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2302      	movs	r3, #2
 8000694:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800069e:	230b      	movs	r3, #11
 80006a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006a6:	4619      	mov	r1, r3
 80006a8:	484d      	ldr	r0, [pc, #308]	; (80007e0 <MX_GPIO_Init+0x2e0>)
 80006aa:	f001 fa39 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80006ae:	f64f 7383 	movw	r3, #65411	; 0xff83
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006c0:	230c      	movs	r3, #12
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006c8:	4619      	mov	r1, r3
 80006ca:	4846      	ldr	r0, [pc, #280]	; (80007e4 <MX_GPIO_Init+0x2e4>)
 80006cc:	f001 fa28 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80006d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d6:	2312      	movs	r3, #18
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006e2:	2304      	movs	r3, #4
 80006e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ea:	4619      	mov	r1, r3
 80006ec:	483e      	ldr	r0, [pc, #248]	; (80007e8 <MX_GPIO_Init+0x2e8>)
 80006ee:	f001 fa17 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80006f2:	f643 4323 	movw	r3, #15395	; 0x3c23
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000704:	230a      	movs	r3, #10
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800070c:	4619      	mov	r1, r3
 800070e:	4836      	ldr	r0, [pc, #216]	; (80007e8 <MX_GPIO_Init+0x2e8>)
 8000710:	f001 fa06 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000714:	2310      	movs	r3, #16
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000724:	2302      	movs	r3, #2
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800072c:	4619      	mov	r1, r3
 800072e:	482e      	ldr	r0, [pc, #184]	; (80007e8 <MX_GPIO_Init+0x2e8>)
 8000730:	f001 f9f6 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000744:	2308      	movs	r3, #8
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800074c:	4619      	mov	r1, r3
 800074e:	4820      	ldr	r0, [pc, #128]	; (80007d0 <MX_GPIO_Init+0x2d0>)
 8000750:	f001 f9e6 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000754:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000766:	230c      	movs	r3, #12
 8000768:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076e:	4619      	mov	r1, r3
 8000770:	481e      	ldr	r0, [pc, #120]	; (80007ec <MX_GPIO_Init+0x2ec>)
 8000772:	f001 f9d5 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000788:	2301      	movs	r3, #1
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000790:	4619      	mov	r1, r3
 8000792:	4817      	ldr	r0, [pc, #92]	; (80007f0 <MX_GPIO_Init+0x2f0>)
 8000794:	f001 f9c4 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000798:	2360      	movs	r3, #96	; 0x60
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007a8:	230d      	movs	r3, #13
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	; (80007e4 <MX_GPIO_Init+0x2e4>)
 80007b4:	f001 f9b4 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007c8:	2307      	movs	r3, #7
 80007ca:	e013      	b.n	80007f4 <MX_GPIO_Init+0x2f4>
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	40022000 	.word	0x40022000
 80007d8:	40022800 	.word	0x40022800
 80007dc:	40021c00 	.word	0x40021c00
 80007e0:	40021800 	.word	0x40021800
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40020400 	.word	0x40020400
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40020000 	.word	0x40020000
 80007f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007fa:	4619      	mov	r1, r3
 80007fc:	48bc      	ldr	r0, [pc, #752]	; (8000af0 <MX_GPIO_Init+0x5f0>)
 80007fe:	f001 f98f 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000802:	f248 1333 	movw	r3, #33075	; 0x8133
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000814:	230c      	movs	r3, #12
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081c:	4619      	mov	r1, r3
 800081e:	48b5      	ldr	r0, [pc, #724]	; (8000af4 <MX_GPIO_Init+0x5f4>)
 8000820:	f001 f97e 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000824:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000836:	230e      	movs	r3, #14
 8000838:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800083a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083e:	4619      	mov	r1, r3
 8000840:	48ad      	ldr	r0, [pc, #692]	; (8000af8 <MX_GPIO_Init+0x5f8>)
 8000842:	f001 f96d 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000858:	4619      	mov	r1, r3
 800085a:	48a7      	ldr	r0, [pc, #668]	; (8000af8 <MX_GPIO_Init+0x5f8>)
 800085c:	f001 f960 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000860:	2340      	movs	r3, #64	; 0x40
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000864:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000872:	4619      	mov	r1, r3
 8000874:	48a1      	ldr	r0, [pc, #644]	; (8000afc <MX_GPIO_Init+0x5fc>)
 8000876:	f001 f953 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800087a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800088c:	230c      	movs	r3, #12
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000894:	4619      	mov	r1, r3
 8000896:	4899      	ldr	r0, [pc, #612]	; (8000afc <MX_GPIO_Init+0x5fc>)
 8000898:	f001 f942 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800089c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ae:	230a      	movs	r3, #10
 80008b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b6:	4619      	mov	r1, r3
 80008b8:	4891      	ldr	r0, [pc, #580]	; (8000b00 <MX_GPIO_Init+0x600>)
 80008ba:	f001 f931 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80008be:	23f0      	movs	r3, #240	; 0xf0
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80008ce:	230a      	movs	r3, #10
 80008d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d6:	4619      	mov	r1, r3
 80008d8:	488a      	ldr	r0, [pc, #552]	; (8000b04 <MX_GPIO_Init+0x604>)
 80008da:	f001 f921 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80008de:	23f7      	movs	r3, #247	; 0xf7
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008ee:	230e      	movs	r3, #14
 80008f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f6:	4619      	mov	r1, r3
 80008f8:	4883      	ldr	r0, [pc, #524]	; (8000b08 <MX_GPIO_Init+0x608>)
 80008fa:	f001 f911 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000910:	2309      	movs	r3, #9
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000918:	4619      	mov	r1, r3
 800091a:	4876      	ldr	r0, [pc, #472]	; (8000af4 <MX_GPIO_Init+0x5f4>)
 800091c:	f001 f900 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000932:	230a      	movs	r3, #10
 8000934:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800093a:	4619      	mov	r1, r3
 800093c:	486d      	ldr	r0, [pc, #436]	; (8000af4 <MX_GPIO_Init+0x5f4>)
 800093e:	f001 f8ef 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000942:	2320      	movs	r3, #32
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000956:	4619      	mov	r1, r3
 8000958:	4868      	ldr	r0, [pc, #416]	; (8000afc <MX_GPIO_Init+0x5fc>)
 800095a:	f001 f8e1 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800095e:	2308      	movs	r3, #8
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800096e:	230d      	movs	r3, #13
 8000970:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000976:	4619      	mov	r1, r3
 8000978:	4860      	ldr	r0, [pc, #384]	; (8000afc <MX_GPIO_Init+0x5fc>)
 800097a:	f001 f8d1 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PI1 PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 800097e:	f241 030a 	movw	r3, #4106	; 0x100a
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000994:	4619      	mov	r1, r3
 8000996:	485b      	ldr	r0, [pc, #364]	; (8000b04 <MX_GPIO_Init+0x604>)
 8000998:	f001 f8c2 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ae:	4619      	mov	r1, r3
 80009b0:	4856      	ldr	r0, [pc, #344]	; (8000b0c <MX_GPIO_Init+0x60c>)
 80009b2:	f001 f8b5 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80009b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009c8:	230c      	movs	r3, #12
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	484f      	ldr	r0, [pc, #316]	; (8000b10 <MX_GPIO_Init+0x610>)
 80009d4:	f001 f8a4 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80009d8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009ea:	230e      	movs	r3, #14
 80009ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f2:	4619      	mov	r1, r3
 80009f4:	4843      	ldr	r0, [pc, #268]	; (8000b04 <MX_GPIO_Init+0x604>)
 80009f6:	f001 f893 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80009fa:	2308      	movs	r3, #8
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	483d      	ldr	r0, [pc, #244]	; (8000b08 <MX_GPIO_Init+0x608>)
 8000a12:	f001 f885 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a28:	230d      	movs	r3, #13
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a30:	4619      	mov	r1, r3
 8000a32:	4830      	ldr	r0, [pc, #192]	; (8000af4 <MX_GPIO_Init+0x5f4>)
 8000a34:	f001 f874 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a38:	2310      	movs	r3, #16
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a48:	4619      	mov	r1, r3
 8000a4a:	482c      	ldr	r0, [pc, #176]	; (8000afc <MX_GPIO_Init+0x5fc>)
 8000a4c:	f001 f868 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000a50:	2304      	movs	r3, #4
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a60:	230c      	movs	r3, #12
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4824      	ldr	r0, [pc, #144]	; (8000afc <MX_GPIO_Init+0x5fc>)
 8000a6c:	f001 f858 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000a70:	f248 0304 	movw	r3, #32772	; 0x8004
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a82:	4619      	mov	r1, r3
 8000a84:	4823      	ldr	r0, [pc, #140]	; (8000b14 <MX_GPIO_Init+0x614>)
 8000a86:	f001 f84b 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	481c      	ldr	r0, [pc, #112]	; (8000b14 <MX_GPIO_Init+0x614>)
 8000aa4:	f001 f83c 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000aa8:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000aba:	230d      	movs	r3, #13
 8000abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4813      	ldr	r0, [pc, #76]	; (8000b14 <MX_GPIO_Init+0x614>)
 8000ac6:	f001 f82b 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000aca:	2301      	movs	r3, #1
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000ada:	2302      	movs	r3, #2
 8000adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_GPIO_Init+0x604>)
 8000ae6:	f001 f81b 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aee:	e013      	b.n	8000b18 <MX_GPIO_Init+0x618>
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40021800 	.word	0x40021800
 8000af8:	40022400 	.word	0x40022400
 8000afc:	40020c00 	.word	0x40020c00
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40022000 	.word	0x40022000
 8000b08:	40022800 	.word	0x40022800
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40021400 	.word	0x40021400
 8000b14:	40021c00 	.word	0x40021c00
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b26:	2307      	movs	r3, #7
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2e:	4619      	mov	r1, r3
 8000b30:	488d      	ldr	r0, [pc, #564]	; (8000d68 <MX_GPIO_Init+0x868>)
 8000b32:	f000 fff5 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b50:	4619      	mov	r1, r3
 8000b52:	4885      	ldr	r0, [pc, #532]	; (8000d68 <MX_GPIO_Init+0x868>)
 8000b54:	f000 ffe4 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b5e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	487f      	ldr	r0, [pc, #508]	; (8000d6c <MX_GPIO_Init+0x86c>)
 8000b70:	f000 ffd6 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000b74:	23c0      	movs	r3, #192	; 0xc0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b84:	2308      	movs	r3, #8
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4878      	ldr	r0, [pc, #480]	; (8000d70 <MX_GPIO_Init+0x870>)
 8000b90:	f000 ffc6 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000b94:	2310      	movs	r3, #16
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ba4:	230a      	movs	r3, #10
 8000ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bac:	4619      	mov	r1, r3
 8000bae:	4871      	ldr	r0, [pc, #452]	; (8000d74 <MX_GPIO_Init+0x874>)
 8000bb0:	f000 ffb6 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000bb4:	2328      	movs	r3, #40	; 0x28
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4869      	ldr	r0, [pc, #420]	; (8000d74 <MX_GPIO_Init+0x874>)
 8000bd0:	f000 ffa6 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000bd4:	23c8      	movs	r3, #200	; 0xc8
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be8:	4619      	mov	r1, r3
 8000bea:	4863      	ldr	r0, [pc, #396]	; (8000d78 <MX_GPIO_Init+0x878>)
 8000bec:	f000 ff98 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000bf0:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c02:	4619      	mov	r1, r3
 8000c04:	485d      	ldr	r0, [pc, #372]	; (8000d7c <MX_GPIO_Init+0x87c>)
 8000c06:	f000 ff8b 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c22:	4619      	mov	r1, r3
 8000c24:	4852      	ldr	r0, [pc, #328]	; (8000d70 <MX_GPIO_Init+0x870>)
 8000c26:	f000 ff7b 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c42:	4619      	mov	r1, r3
 8000c44:	484a      	ldr	r0, [pc, #296]	; (8000d70 <MX_GPIO_Init+0x870>)
 8000c46:	f000 ff6b 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c4a:	2332      	movs	r3, #50	; 0x32
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5a:	230b      	movs	r3, #11
 8000c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c62:	4619      	mov	r1, r3
 8000c64:	4842      	ldr	r0, [pc, #264]	; (8000d70 <MX_GPIO_Init+0x870>)
 8000c66:	f000 ff5b 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	483e      	ldr	r0, [pc, #248]	; (8000d78 <MX_GPIO_Init+0x878>)
 8000c7e:	f000 ff4f 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c82:	2386      	movs	r3, #134	; 0x86
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c92:	230b      	movs	r3, #11
 8000c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4832      	ldr	r0, [pc, #200]	; (8000d68 <MX_GPIO_Init+0x868>)
 8000c9e:	f000 ff3f 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	482c      	ldr	r0, [pc, #176]	; (8000d68 <MX_GPIO_Init+0x868>)
 8000cb6:	f000 ff33 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000cba:	2350      	movs	r3, #80	; 0x50
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cca:	230d      	movs	r3, #13
 8000ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4824      	ldr	r0, [pc, #144]	; (8000d68 <MX_GPIO_Init+0x868>)
 8000cd6:	f000 ff23 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000cda:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce0:	2312      	movs	r3, #18
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cec:	2304      	movs	r3, #4
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481f      	ldr	r0, [pc, #124]	; (8000d74 <MX_GPIO_Init+0x874>)
 8000cf8:	f000 ff12 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000cfc:	2328      	movs	r3, #40	; 0x28
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d0c:	230a      	movs	r3, #10
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d14:	4619      	mov	r1, r3
 8000d16:	4814      	ldr	r0, [pc, #80]	; (8000d68 <MX_GPIO_Init+0x868>)
 8000d18:	f000 ff02 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000d1c:	2340      	movs	r3, #64	; 0x40
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000d2c:	2309      	movs	r3, #9
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d34:	4619      	mov	r1, r3
 8000d36:	480f      	ldr	r0, [pc, #60]	; (8000d74 <MX_GPIO_Init+0x874>)
 8000d38:	f000 fef2 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000d3c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d4e:	2305      	movs	r3, #5
 8000d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d56:	4619      	mov	r1, r3
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <MX_GPIO_Init+0x880>)
 8000d5a:	f000 fee1 	bl	8001b20 <HAL_GPIO_Init>

}
 8000d5e:	bf00      	nop
 8000d60:	3740      	adds	r7, #64	; 0x40
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40022000 	.word	0x40022000
 8000d70:	40020800 	.word	0x40020800
 8000d74:	40021c00 	.word	0x40021c00
 8000d78:	40021800 	.word	0x40021800
 8000d7c:	40021400 	.word	0x40021400
 8000d80:	40020400 	.word	0x40020400

08000d84 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d88:	f3bf 8f4f 	dsb	sy
}
 8000d8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d8e:	f3bf 8f6f 	isb	sy
}
 8000d92:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <SCB_EnableICache+0x48>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d9c:	f3bf 8f4f 	dsb	sy
}
 8000da0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000da2:	f3bf 8f6f 	isb	sy
}
 8000da6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <SCB_EnableICache+0x48>)
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <SCB_EnableICache+0x48>)
 8000dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000db4:	f3bf 8f4f 	dsb	sy
}
 8000db8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dba:	f3bf 8f6f 	isb	sy
}
 8000dbe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <SCB_DisableICache>:
/**
  \brief   Disable I-Cache
  \details Turns off I-Cache
  */
__STATIC_INLINE void SCB_DisableICache (void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd4:	f3bf 8f4f 	dsb	sy
}
 8000dd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dda:	f3bf 8f6f 	isb	sy
}
 8000dde:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <SCB_DisableICache+0x3c>)
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <SCB_DisableICache+0x3c>)
 8000de6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000dea:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <SCB_DisableICache+0x3c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000df4:	f3bf 8f4f 	dsb	sy
}
 8000df8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dfa:	f3bf 8f6f 	isb	sy
}
 8000dfe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <SCB_EnableDCache+0x84>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1e:	f3bf 8f4f 	dsb	sy
}
 8000e22:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <SCB_EnableDCache+0x84>)
 8000e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e2a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	0b5b      	lsrs	r3, r3, #13
 8000e30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e34:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	08db      	lsrs	r3, r3, #3
 8000e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e3e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	015a      	lsls	r2, r3, #5
 8000e44:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e48:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e4e:	4911      	ldr	r1, [pc, #68]	; (8000e94 <SCB_EnableDCache+0x84>)
 8000e50:	4313      	orrs	r3, r2
 8000e52:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1e5a      	subs	r2, r3, #1
 8000e5a:	60ba      	str	r2, [r7, #8]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1ef      	bne.n	8000e40 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	1e5a      	subs	r2, r3, #1
 8000e64:	60fa      	str	r2, [r7, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1e5      	bne.n	8000e36 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e6a:	f3bf 8f4f 	dsb	sy
}
 8000e6e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <SCB_EnableDCache+0x84>)
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <SCB_EnableDCache+0x84>)
 8000e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e7c:	f3bf 8f4f 	dsb	sy
}
 8000e80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e82:	f3bf 8f6f 	isb	sy
}
 8000e86:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <SCB_DisableDCache>:
/**
  \brief   Disable D-Cache
  \details Turns off D-Cache
  */
__STATIC_INLINE void SCB_DisableDCache (void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <SCB_DisableDCache+0x84>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea6:	f3bf 8f4f 	dsb	sy
}
 8000eaa:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <SCB_DisableDCache+0x84>)
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <SCB_DisableDCache+0x84>)
 8000eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eb8:	f3bf 8f4f 	dsb	sy
}
 8000ebc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <SCB_DisableDCache+0x84>)
 8000ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ec4:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	0b5b      	lsrs	r3, r3, #13
 8000eca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ece:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ed8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	015a      	lsls	r2, r3, #5
 8000ede:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000ee2:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <SCB_DisableDCache+0x84>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1e5a      	subs	r2, r3, #1
 8000ef4:	60ba      	str	r2, [r7, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1ef      	bne.n	8000eda <SCB_DisableDCache+0x42>
    } while(sets-- != 0U);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	1e5a      	subs	r2, r3, #1
 8000efe:	60fa      	str	r2, [r7, #12]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1e5      	bne.n	8000ed0 <SCB_DisableDCache+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f04:	f3bf 8f4f 	dsb	sy
}
 8000f08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy
}
 8000f0e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	int result1, result2;
	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000f26:	f7ff ff2d 	bl	8000d84 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000f2a:	f7ff ff71 	bl	8000e10 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f2e:	f000 fbf4 	bl	800171a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f32:	f000 f82f 	bl	8000f94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f36:	f7ff fae3 	bl	8000500 <MX_GPIO_Init>
	MX_QUADSPI_Init();
 8000f3a:	f000 f89f 	bl	800107c <MX_QUADSPI_Init>

	/* USER CODE BEGIN 2 */

	if (CSP_QUADSPI_Init() != HAL_OK) {
 8000f3e:	f000 f983 	bl	8001248 <CSP_QUADSPI_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <main+0x2c>
		Error_Handler();
 8000f48:	f000 f892 	bl	8001070 <Error_Handler>
//
//	if (CSP_QSPI_Write(writebuffer, 0, strlen(writebuffer)) != HAL_OK) {
//		Error_Handler();
//	}

	if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 8000f4c:	f000 fabc 	bl	80014c8 <CSP_QSPI_EnableMemoryMappedMode>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <main+0x3a>
		Error_Handler();
 8000f56:	f000 f88b 	bl	8001070 <Error_Handler>
//
//		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
//	}


		SCB_DisableICache();
 8000f5a:	f7ff ff39 	bl	8000dd0 <SCB_DisableICache>
		SCB_DisableDCache();
 8000f5e:	f7ff ff9b 	bl	8000e98 <SCB_DisableDCache>


		SysTick->CTRL=0;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <main+0x68>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]

		JumpToApplication =
				(pFunction) (*(__IO uint32_t*) (APPLICATION_ADDRESS + 4));
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <main+0x6c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
		JumpToApplication =
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <main+0x70>)
 8000f70:	601a      	str	r2, [r3, #0]
		__set_MSP(*(__IO uint32_t*) (APPLICATION_ADDRESS + 4));
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <main+0x6c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f383 8808 	msr	MSP, r3
}
 8000f7e:	bf00      	nop
		JumpToApplication();
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <main+0x70>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4798      	blx	r3

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f86:	e7fe      	b.n	8000f86 <main+0x66>
 8000f88:	e000e010 	.word	0xe000e010
 8000f8c:	90000004 	.word	0x90000004
 8000f90:	20000028 	.word	0x20000028

08000f94 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	; 0x50
 8000f98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	2230      	movs	r2, #48	; 0x30
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fa90 	bl	80034c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <SystemClock_Config+0xd4>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a2a      	ldr	r2, [pc, #168]	; (8001068 <SystemClock_Config+0xd4>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <SystemClock_Config+0xd4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd0:	4b26      	ldr	r3, [pc, #152]	; (800106c <SystemClock_Config+0xd8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a25      	ldr	r2, [pc, #148]	; (800106c <SystemClock_Config+0xd8>)
 8000fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <SystemClock_Config+0xd8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000ffc:	2319      	movs	r3, #25
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 432;
 8001000:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001004:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001006:	2302      	movs	r3, #2
 8001008:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800100a:	2302      	movs	r3, #2
 800100c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fdee 	bl	8002bf4 <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x8e>
		Error_Handler();
 800101e:	f000 f827 	bl	8001070 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001022:	f001 f84f 	bl	80020c4 <HAL_PWREx_EnableOverDrive>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x9c>
		Error_Handler();
 800102c:	f000 f820 	bl	8001070 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001040:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2107      	movs	r1, #7
 800104e:	4618      	mov	r0, r3
 8001050:	f002 f874 	bl	800313c <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xca>
		Error_Handler();
 800105a:	f000 f809 	bl	8001070 <Error_Handler>
	}
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	; 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001078:	e7fe      	b.n	8001078 <Error_Handler+0x8>
	...

0800107c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_QUADSPI_Init+0x50>)
 8001082:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <MX_QUADSPI_Init+0x54>)
 8001084:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_QUADSPI_Init+0x50>)
 8001088:	2201      	movs	r2, #1
 800108a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_QUADSPI_Init+0x50>)
 800108e:	2204      	movs	r2, #4
 8001090:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_QUADSPI_Init+0x50>)
 8001094:	2210      	movs	r2, #16
 8001096:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_QUADSPI_Init+0x50>)
 800109a:	2217      	movs	r2, #23
 800109c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_QUADSPI_Init+0x50>)
 80010a0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80010a4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_QUADSPI_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <MX_QUADSPI_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_QUADSPI_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_QUADSPI_Init+0x50>)
 80010ba:	f001 f853 	bl	8002164 <HAL_QSPI_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80010c4:	f7ff ffd4 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000002c 	.word	0x2000002c
 80010d0:	a0001000 	.word	0xa0001000

080010d4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a3b      	ldr	r2, [pc, #236]	; (80011e0 <HAL_QSPI_MspInit+0x10c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d170      	bne.n	80011d8 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010f6:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <HAL_QSPI_MspInit+0x110>)
 80010f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010fa:	4a3a      	ldr	r2, [pc, #232]	; (80011e4 <HAL_QSPI_MspInit+0x110>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6393      	str	r3, [r2, #56]	; 0x38
 8001102:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <HAL_QSPI_MspInit+0x110>)
 8001104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800110e:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <HAL_QSPI_MspInit+0x110>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a34      	ldr	r2, [pc, #208]	; (80011e4 <HAL_QSPI_MspInit+0x110>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <HAL_QSPI_MspInit+0x110>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <HAL_QSPI_MspInit+0x110>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a2e      	ldr	r2, [pc, #184]	; (80011e4 <HAL_QSPI_MspInit+0x110>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <HAL_QSPI_MspInit+0x110>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <HAL_QSPI_MspInit+0x110>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a28      	ldr	r2, [pc, #160]	; (80011e4 <HAL_QSPI_MspInit+0x110>)
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <HAL_QSPI_MspInit+0x110>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001156:	2304      	movs	r3, #4
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001166:	2309      	movs	r3, #9
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	481d      	ldr	r0, [pc, #116]	; (80011e8 <HAL_QSPI_MspInit+0x114>)
 8001172:	f000 fcd5 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001176:	2340      	movs	r3, #64	; 0x40
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001186:	230a      	movs	r3, #10
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	4816      	ldr	r0, [pc, #88]	; (80011ec <HAL_QSPI_MspInit+0x118>)
 8001192:	f000 fcc5 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001196:	2304      	movs	r3, #4
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011a6:	2309      	movs	r3, #9
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	480e      	ldr	r0, [pc, #56]	; (80011ec <HAL_QSPI_MspInit+0x118>)
 80011b2:	f000 fcb5 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80011b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011c8:	2309      	movs	r3, #9
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <HAL_QSPI_MspInit+0x11c>)
 80011d4:	f000 fca4 	bl	8001b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80011d8:	bf00      	nop
 80011da:	3730      	adds	r7, #48	; 0x30
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	a0001000 	.word	0xa0001000
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020c00 	.word	0x40020c00

080011f4 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <HAL_QSPI_MspDeInit+0x40>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d112      	bne.n	800122c <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_QSPI_MspDeInit+0x44>)
 8001208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <HAL_QSPI_MspDeInit+0x44>)
 800120c:	f023 0302 	bic.w	r3, r3, #2
 8001210:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(QSPI_D2_GPIO_Port, QSPI_D2_Pin);
 8001212:	2104      	movs	r1, #4
 8001214:	4809      	ldr	r0, [pc, #36]	; (800123c <HAL_QSPI_MspDeInit+0x48>)
 8001216:	f000 fe2f 	bl	8001e78 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, QSPI_NCS_Pin|GPIO_PIN_2);
 800121a:	2144      	movs	r1, #68	; 0x44
 800121c:	4808      	ldr	r0, [pc, #32]	; (8001240 <HAL_QSPI_MspDeInit+0x4c>)
 800121e:	f000 fe2b 	bl	8001e78 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin);
 8001222:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <HAL_QSPI_MspDeInit+0x50>)
 8001228:	f000 fe26 	bl	8001e78 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	a0001000 	.word	0xa0001000
 8001238:	40023800 	.word	0x40023800
 800123c:	40021000 	.word	0x40021000
 8001240:	40020400 	.word	0x40020400
 8001244:	40020c00 	.word	0x40020c00

08001248 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */
/* QUADSPI init function */

uint8_t CSP_QUADSPI_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
  hqspi.Instance = QUADSPI;
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <CSP_QUADSPI_Init+0x64>)
 800124e:	4a18      	ldr	r2, [pc, #96]	; (80012b0 <CSP_QUADSPI_Init+0x68>)
 8001250:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8001252:	4816      	ldr	r0, [pc, #88]	; (80012ac <CSP_QUADSPI_Init+0x64>)
 8001254:	f001 f802 	bl	800225c <HAL_QSPI_DeInit>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e021      	b.n	80012a6 <CSP_QUADSPI_Init+0x5e>
    }

    MX_QUADSPI_Init();
 8001262:	f7ff ff0b 	bl	800107c <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
 8001266:	f000 f963 	bl	8001530 <QSPI_ResetChip>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e018      	b.n	80012a6 <CSP_QUADSPI_Init+0x5e>
    }

    HAL_Delay(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f000 faad 	bl	80017d4 <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 800127a:	f000 f81b 	bl	80012b4 <QSPI_AutoPollingMemReady>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <CSP_QUADSPI_Init+0x40>
        return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e00e      	b.n	80012a6 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
 8001288:	f000 f84c 	bl	8001324 <QSPI_WriteEnable>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <CSP_QUADSPI_Init+0x4e>

        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e007      	b.n	80012a6 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_Configuration() != HAL_OK) {
 8001296:	f000 f88f 	bl	80013b8 <QSPI_Configuration>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <CSP_QUADSPI_Init+0x5c>
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <CSP_QUADSPI_Init+0x5e>
    }

    return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000002c 	.word	0x2000002c
 80012b0:	a0001000 	.word	0xa0001000

080012b4 <QSPI_AutoPollingMemReady>:

    return HAL_OK;
}

uint8_t QSPI_AutoPollingMemReady(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	; 0x50
 80012b8:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80012ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 80012c0:	2305      	movs	r3, #5
 80012c2:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80012cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80012da:	2300      	movs	r3, #0
 80012dc:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80012de:	2300      	movs	r3, #0
 80012e0:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 80012f2:	2310      	movs	r3, #16
 80012f4:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80012f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012fa:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012fc:	463a      	mov	r2, r7
 80012fe:	f107 0118 	add.w	r1, r7, #24
 8001302:	f241 3388 	movw	r3, #5000	; 0x1388
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <QSPI_AutoPollingMemReady+0x6c>)
 8001308:	f001 f963 	bl	80025d2 <HAL_QSPI_AutoPolling>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <QSPI_AutoPollingMemReady+0x62>
    {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3750      	adds	r7, #80	; 0x50
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000002c 	.word	0x2000002c

08001324 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b094      	sub	sp, #80	; 0x50
 8001328:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800132a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 8001330:	2306      	movs	r3, #6
 8001332:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001334:	2300      	movs	r3, #0
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001338:	2300      	movs	r3, #0
 800133a:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 800133c:	2300      	movs	r3, #0
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001348:	2300      	movs	r3, #0
 800134a:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800134c:	2300      	movs	r3, #0
 800134e:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	f241 3288 	movw	r2, #5000	; 0x1388
 8001358:	4619      	mov	r1, r3
 800135a:	4816      	ldr	r0, [pc, #88]	; (80013b4 <QSPI_WriteEnable+0x90>)
 800135c:	f000 ffa2 	bl	80022a4 <HAL_QSPI_Command>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e01f      	b.n	80013aa <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 800136a:	2302      	movs	r3, #2
 800136c:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 800136e:	2302      	movs	r3, #2
 8001370:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8001376:	2301      	movs	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 800137a:	2310      	movs	r3, #16
 800137c:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800137e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001382:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 8001384:	2305      	movs	r3, #5
 8001386:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800138c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 800138e:	463a      	mov	r2, r7
 8001390:	f107 0118 	add.w	r1, r7, #24
 8001394:	f241 3388 	movw	r3, #5000	; 0x1388
 8001398:	4806      	ldr	r0, [pc, #24]	; (80013b4 <QSPI_WriteEnable+0x90>)
 800139a:	f001 f91a 	bl	80025d2 <HAL_QSPI_AutoPolling>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3750      	adds	r7, #80	; 0x50
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000002c 	.word	0x2000002c

080013b8 <QSPI_Configuration>:


/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b092      	sub	sp, #72	; 0x48
 80013bc:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80013be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c2:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = READ_VOL_CFG_REG_CMD;
 80013c4:	2385      	movs	r3, #133	; 0x85
 80013c6:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80013d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80013de:	2300      	movs	r3, #0
 80013e0:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.NbData = 1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f2:	4619      	mov	r1, r3
 80013f4:	4833      	ldr	r0, [pc, #204]	; (80014c4 <QSPI_Configuration+0x10c>)
 80013f6:	f000 ff55 	bl	80022a4 <HAL_QSPI_Command>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <QSPI_Configuration+0x4c>
        != HAL_OK) {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e05b      	b.n	80014bc <QSPI_Configuration+0x104>
    }


    if (HAL_QSPI_Receive(&hqspi, &reg,
 8001404:	1dfb      	adds	r3, r7, #7
 8001406:	f241 3288 	movw	r2, #5000	; 0x1388
 800140a:	4619      	mov	r1, r3
 800140c:	482d      	ldr	r0, [pc, #180]	; (80014c4 <QSPI_Configuration+0x10c>)
 800140e:	f001 f83e 	bl	800248e <HAL_QSPI_Receive>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <QSPI_Configuration+0x64>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e04f      	b.n	80014bc <QSPI_Configuration+0x104>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
 800141c:	f7ff ff82 	bl	8001324 <QSPI_WriteEnable>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <QSPI_Configuration+0x72>

        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e048      	b.n	80014bc <QSPI_Configuration+0x104>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	b25a      	sxtb	r2, r3
 8001434:	23f0      	movs	r3, #240	; 0xf0
 8001436:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4619      	mov	r1, r3
 800144a:	230a      	movs	r3, #10
 800144c:	408b      	lsls	r3, r1
 800144e:	b25b      	sxtb	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b25b      	sxtb	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	71fb      	strb	r3, [r7, #7]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800145c:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001466:	2300      	movs	r3, #0
 8001468:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800146a:	2300      	movs	r3, #0
 800146c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 800146e:	2381      	movs	r3, #129	; 0x81
 8001470:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001476:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
    sCommand.NbData = 1;
 8001480:	2301      	movs	r3, #1
 8001482:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	f241 3288 	movw	r2, #5000	; 0x1388
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <QSPI_Configuration+0x10c>)
 8001490:	f000 ff08 	bl	80022a4 <HAL_QSPI_Command>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <QSPI_Configuration+0xe6>
        != HAL_OK) {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <QSPI_Configuration+0x104>
    }

    if (HAL_QSPI_Transmit(&hqspi, &reg,
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a4:	4619      	mov	r1, r3
 80014a6:	4807      	ldr	r0, [pc, #28]	; (80014c4 <QSPI_Configuration+0x10c>)
 80014a8:	f000 ff5a 	bl	8002360 <HAL_QSPI_Transmit>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <QSPI_Configuration+0x102>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        Error_Handler();
 80014b2:	f7ff fddd 	bl	8001070 <Error_Handler>
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <QSPI_Configuration+0x104>
    }
    return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3748      	adds	r7, #72	; 0x48
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000002c 	.word	0x2000002c

080014c8 <CSP_QSPI_EnableMemoryMappedMode>:
    return HAL_OK;
}


uint8_t CSP_QSPI_EnableMemoryMappedMode(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b090      	sub	sp, #64	; 0x40
 80014cc:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_MemoryMappedTypeDef sMemMappedCfg;

    /* Enable Memory-Mapped mode-------------------------------------------------- */

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80014ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d2:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80014d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d8:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014da:	2300      	movs	r3, #0
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80014e2:	2300      	movs	r3, #0
 80014e4:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80014e6:	2300      	movs	r3, #0
 80014e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 80014ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_4_LINES;
 80014f0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Address = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
    sCommand.Instruction = QUAD_INOUT_FAST_READ_CMD;
 80014fe:	23eb      	movs	r3, #235	; 0xeb
 8001500:	60bb      	str	r3, [r7, #8]
    sCommand.DummyCycles = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8001502:	230a      	movs	r3, #10
 8001504:	61fb      	str	r3, [r7, #28]

    sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]

    if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
 800150a:	463a      	mov	r2, r7
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	4619      	mov	r1, r3
 8001512:	4806      	ldr	r0, [pc, #24]	; (800152c <CSP_QSPI_EnableMemoryMappedMode+0x64>)
 8001514:	f001 f8d4 	bl	80026c0 <HAL_QSPI_MemoryMapped>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <CSP_QSPI_EnableMemoryMappedMode+0x5a>
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <CSP_QSPI_EnableMemoryMappedMode+0x5c>
    }
    return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3740      	adds	r7, #64	; 0x40
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000002c 	.word	0x2000002c

08001530 <QSPI_ResetChip>:

uint8_t QSPI_ResetChip()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b090      	sub	sp, #64	; 0x40
 8001534:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800153a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800153e:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800154e:	2300      	movs	r3, #0
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001552:	2300      	movs	r3, #0
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 8001556:	2366      	movs	r3, #102	; 0x66
 8001558:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8001562:	2300      	movs	r3, #0
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001570:	4619      	mov	r1, r3
 8001572:	481d      	ldr	r0, [pc, #116]	; (80015e8 <QSPI_ResetChip+0xb8>)
 8001574:	f000 fe96 	bl	80022a4 <HAL_QSPI_Command>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e02e      	b.n	80015e0 <QSPI_ResetChip+0xb0>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 8001582:	2300      	movs	r3, #0
 8001584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001586:	e003      	b.n	8001590 <QSPI_ResetChip+0x60>
        __NOP();
 8001588:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 800158a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800158c:	3301      	adds	r3, #1
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001592:	2b2e      	cmp	r3, #46	; 0x2e
 8001594:	d9f8      	bls.n	8001588 <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159a:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800159c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a0:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80015aa:	2300      	movs	r3, #0
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80015ae:	2300      	movs	r3, #0
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_MEMORY_CMD;
 80015b2:	2399      	movs	r3, #153	; 0x99
 80015b4:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4619      	mov	r1, r3
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <QSPI_ResetChip+0xb8>)
 80015d0:	f000 fe68 	bl	80022a4 <HAL_QSPI_Command>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <QSPI_ResetChip+0xb0>
    }
    return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3740      	adds	r7, #64	; 0x40
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000002c 	.word	0x2000002c

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_MspInit+0x50>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a11      	ldr	r2, [pc, #68]	; (800163c <HAL_MspInit+0x50>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_MspInit+0x50>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_MspInit+0x50>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <HAL_MspInit+0x50>)
 8001610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001614:	6453      	str	r3, [r2, #68]	; 0x44
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x50>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2005      	movs	r0, #5
 8001628:	f000 f9d3 	bl	80019d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800162c:	2005      	movs	r0, #5
 800162e:	f000 f9ec 	bl	8001a0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168c:	f000 f882 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <SystemInit+0x20>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <SystemInit+0x20>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001700 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d0:	4a0e      	ldr	r2, [pc, #56]	; (800170c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e4:	4c0b      	ldr	r4, [pc, #44]	; (8001714 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016f2:	f7ff ffd7 	bl	80016a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f6:	f001 fec3 	bl	8003480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fa:	f7ff fc11 	bl	8000f20 <main>
  bx  lr    
 80016fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001700:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800170c:	08003510 	.word	0x08003510
  ldr r2, =_sbss
 8001710:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001714:	2000007c 	.word	0x2000007c

08001718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC_IRQHandler>

0800171a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171e:	2003      	movs	r0, #3
 8001720:	f000 f94c 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001724:	2000      	movs	r0, #0
 8001726:	f000 f805 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172a:	f7ff ff5f 	bl	80015ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f967 	bl	8001a26 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f000 f92f 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000000 	.word	0x20000000
 800178c:	20000008 	.word	0x20000008
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000078 	.word	0x20000078

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000078 	.word	0x20000078

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_Delay+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffde 	bl	80017bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008

0800181c <__NVIC_SetPriorityGrouping>:
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <__NVIC_SetPriorityGrouping+0x40>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	4313      	orrs	r3, r2
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	; (800185c <__NVIC_SetPriorityGrouping+0x40>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00
 8001860:	05fa0000 	.word	0x05fa0000

08001864 <__NVIC_GetPriorityGrouping>:
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <__NVIC_EnableIRQ+0x38>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff29 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff3e 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff31 	bl	8001880 <__NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffa2 	bl	8001978 <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff feb6 	bl	80017bc <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d008      	beq.n	8001a70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e052      	b.n	8001b16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0216 	bic.w	r2, r2, #22
 8001a7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d103      	bne.n	8001aa0 <HAL_DMA_Abort+0x62>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0208 	bic.w	r2, r2, #8
 8001aae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac0:	e013      	b.n	8001aea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ac2:	f7ff fe7b 	bl	80017bc <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d90c      	bls.n	8001aea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2203      	movs	r2, #3
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e015      	b.n	8001b16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e4      	bne.n	8001ac2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afc:	223f      	movs	r2, #63	; 0x3f
 8001afe:	409a      	lsls	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	e175      	b.n	8001e2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b40:	2201      	movs	r2, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	f040 8164 	bne.w	8001e26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d005      	beq.n	8001b76 <HAL_GPIO_Init+0x56>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d130      	bne.n	8001bd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 0201 	and.w	r2, r3, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d017      	beq.n	8001c14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d123      	bne.n	8001c68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	08da      	lsrs	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	69b9      	ldr	r1, [r7, #24]
 8001c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80be 	beq.w	8001e26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	4b66      	ldr	r3, [pc, #408]	; (8001e44 <HAL_GPIO_Init+0x324>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4a65      	ldr	r2, [pc, #404]	; (8001e44 <HAL_GPIO_Init+0x324>)
 8001cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	4b63      	ldr	r3, [pc, #396]	; (8001e44 <HAL_GPIO_Init+0x324>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cc2:	4a61      	ldr	r2, [pc, #388]	; (8001e48 <HAL_GPIO_Init+0x328>)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	220f      	movs	r2, #15
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a58      	ldr	r2, [pc, #352]	; (8001e4c <HAL_GPIO_Init+0x32c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d037      	beq.n	8001d5e <HAL_GPIO_Init+0x23e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a57      	ldr	r2, [pc, #348]	; (8001e50 <HAL_GPIO_Init+0x330>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d031      	beq.n	8001d5a <HAL_GPIO_Init+0x23a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a56      	ldr	r2, [pc, #344]	; (8001e54 <HAL_GPIO_Init+0x334>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d02b      	beq.n	8001d56 <HAL_GPIO_Init+0x236>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a55      	ldr	r2, [pc, #340]	; (8001e58 <HAL_GPIO_Init+0x338>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d025      	beq.n	8001d52 <HAL_GPIO_Init+0x232>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a54      	ldr	r2, [pc, #336]	; (8001e5c <HAL_GPIO_Init+0x33c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01f      	beq.n	8001d4e <HAL_GPIO_Init+0x22e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a53      	ldr	r2, [pc, #332]	; (8001e60 <HAL_GPIO_Init+0x340>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d019      	beq.n	8001d4a <HAL_GPIO_Init+0x22a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a52      	ldr	r2, [pc, #328]	; (8001e64 <HAL_GPIO_Init+0x344>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0x226>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a51      	ldr	r2, [pc, #324]	; (8001e68 <HAL_GPIO_Init+0x348>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00d      	beq.n	8001d42 <HAL_GPIO_Init+0x222>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a50      	ldr	r2, [pc, #320]	; (8001e6c <HAL_GPIO_Init+0x34c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <HAL_GPIO_Init+0x21e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4f      	ldr	r2, [pc, #316]	; (8001e70 <HAL_GPIO_Init+0x350>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_GPIO_Init+0x21a>
 8001d36:	2309      	movs	r3, #9
 8001d38:	e012      	b.n	8001d60 <HAL_GPIO_Init+0x240>
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	e010      	b.n	8001d60 <HAL_GPIO_Init+0x240>
 8001d3e:	2308      	movs	r3, #8
 8001d40:	e00e      	b.n	8001d60 <HAL_GPIO_Init+0x240>
 8001d42:	2307      	movs	r3, #7
 8001d44:	e00c      	b.n	8001d60 <HAL_GPIO_Init+0x240>
 8001d46:	2306      	movs	r3, #6
 8001d48:	e00a      	b.n	8001d60 <HAL_GPIO_Init+0x240>
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	e008      	b.n	8001d60 <HAL_GPIO_Init+0x240>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x240>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e004      	b.n	8001d60 <HAL_GPIO_Init+0x240>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_Init+0x240>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_GPIO_Init+0x240>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	f002 0203 	and.w	r2, r2, #3
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d70:	4935      	ldr	r1, [pc, #212]	; (8001e48 <HAL_GPIO_Init+0x328>)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_GPIO_Init+0x354>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a34      	ldr	r2, [pc, #208]	; (8001e74 <HAL_GPIO_Init+0x354>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <HAL_GPIO_Init+0x354>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a29      	ldr	r2, [pc, #164]	; (8001e74 <HAL_GPIO_Init+0x354>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd2:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <HAL_GPIO_Init+0x354>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df6:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <HAL_GPIO_Init+0x354>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_GPIO_Init+0x354>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e20:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <HAL_GPIO_Init+0x354>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b0f      	cmp	r3, #15
 8001e30:	f67f ae86 	bls.w	8001b40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40013800 	.word	0x40013800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40020400 	.word	0x40020400
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40021400 	.word	0x40021400
 8001e64:	40021800 	.word	0x40021800
 8001e68:	40021c00 	.word	0x40021c00
 8001e6c:	40022000 	.word	0x40022000
 8001e70:	40022400 	.word	0x40022400
 8001e74:	40013c00 	.word	0x40013c00

08001e78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e0d9      	b.n	8002048 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e94:	2201      	movs	r2, #1
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	f040 80c9 	bne.w	8002042 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8001eb0:	4a6b      	ldr	r2, [pc, #428]	; (8002060 <HAL_GPIO_DeInit+0x1e8>)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a63      	ldr	r2, [pc, #396]	; (8002064 <HAL_GPIO_DeInit+0x1ec>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d037      	beq.n	8001f4a <HAL_GPIO_DeInit+0xd2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a62      	ldr	r2, [pc, #392]	; (8002068 <HAL_GPIO_DeInit+0x1f0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d031      	beq.n	8001f46 <HAL_GPIO_DeInit+0xce>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a61      	ldr	r2, [pc, #388]	; (800206c <HAL_GPIO_DeInit+0x1f4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02b      	beq.n	8001f42 <HAL_GPIO_DeInit+0xca>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a60      	ldr	r2, [pc, #384]	; (8002070 <HAL_GPIO_DeInit+0x1f8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d025      	beq.n	8001f3e <HAL_GPIO_DeInit+0xc6>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a5f      	ldr	r2, [pc, #380]	; (8002074 <HAL_GPIO_DeInit+0x1fc>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01f      	beq.n	8001f3a <HAL_GPIO_DeInit+0xc2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a5e      	ldr	r2, [pc, #376]	; (8002078 <HAL_GPIO_DeInit+0x200>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d019      	beq.n	8001f36 <HAL_GPIO_DeInit+0xbe>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a5d      	ldr	r2, [pc, #372]	; (800207c <HAL_GPIO_DeInit+0x204>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_DeInit+0xba>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a5c      	ldr	r2, [pc, #368]	; (8002080 <HAL_GPIO_DeInit+0x208>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00d      	beq.n	8001f2e <HAL_GPIO_DeInit+0xb6>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a5b      	ldr	r2, [pc, #364]	; (8002084 <HAL_GPIO_DeInit+0x20c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <HAL_GPIO_DeInit+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a5a      	ldr	r2, [pc, #360]	; (8002088 <HAL_GPIO_DeInit+0x210>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_GPIO_DeInit+0xae>
 8001f22:	2309      	movs	r3, #9
 8001f24:	e012      	b.n	8001f4c <HAL_GPIO_DeInit+0xd4>
 8001f26:	230a      	movs	r3, #10
 8001f28:	e010      	b.n	8001f4c <HAL_GPIO_DeInit+0xd4>
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	e00e      	b.n	8001f4c <HAL_GPIO_DeInit+0xd4>
 8001f2e:	2307      	movs	r3, #7
 8001f30:	e00c      	b.n	8001f4c <HAL_GPIO_DeInit+0xd4>
 8001f32:	2306      	movs	r3, #6
 8001f34:	e00a      	b.n	8001f4c <HAL_GPIO_DeInit+0xd4>
 8001f36:	2305      	movs	r3, #5
 8001f38:	e008      	b.n	8001f4c <HAL_GPIO_DeInit+0xd4>
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_DeInit+0xd4>
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e004      	b.n	8001f4c <HAL_GPIO_DeInit+0xd4>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e002      	b.n	8001f4c <HAL_GPIO_DeInit+0xd4>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_GPIO_DeInit+0xd4>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	f002 0203 	and.w	r2, r2, #3
 8001f52:	0092      	lsls	r2, r2, #2
 8001f54:	4093      	lsls	r3, r2
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d132      	bne.n	8001fc2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001f5c:	4b4b      	ldr	r3, [pc, #300]	; (800208c <HAL_GPIO_DeInit+0x214>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	4949      	ldr	r1, [pc, #292]	; (800208c <HAL_GPIO_DeInit+0x214>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001f6a:	4b48      	ldr	r3, [pc, #288]	; (800208c <HAL_GPIO_DeInit+0x214>)
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4946      	ldr	r1, [pc, #280]	; (800208c <HAL_GPIO_DeInit+0x214>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001f78:	4b44      	ldr	r3, [pc, #272]	; (800208c <HAL_GPIO_DeInit+0x214>)
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4942      	ldr	r1, [pc, #264]	; (800208c <HAL_GPIO_DeInit+0x214>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_GPIO_DeInit+0x214>)
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	493f      	ldr	r1, [pc, #252]	; (800208c <HAL_GPIO_DeInit+0x214>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8001fa4:	4a2e      	ldr	r2, [pc, #184]	; (8002060 <HAL_GPIO_DeInit+0x1e8>)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	3302      	adds	r3, #2
 8001fac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	482a      	ldr	r0, [pc, #168]	; (8002060 <HAL_GPIO_DeInit+0x1e8>)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	400a      	ands	r2, r1
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2103      	movs	r1, #3
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	08da      	lsrs	r2, r3, #3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3208      	adds	r2, #8
 8001fe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	08d2      	lsrs	r2, r2, #3
 8001ff8:	4019      	ands	r1, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3208      	adds	r2, #8
 8001ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2103      	movs	r1, #3
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	401a      	ands	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	2101      	movs	r1, #1
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	401a      	ands	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	2103      	movs	r1, #3
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	401a      	ands	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3301      	adds	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	f67f af22 	bls.w	8001e94 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40013800 	.word	0x40013800
 8002064:	40020000 	.word	0x40020000
 8002068:	40020400 	.word	0x40020400
 800206c:	40020800 	.word	0x40020800
 8002070:	40020c00 	.word	0x40020c00
 8002074:	40021000 	.word	0x40021000
 8002078:	40021400 	.word	0x40021400
 800207c:	40021800 	.word	0x40021800
 8002080:	40021c00 	.word	0x40021c00
 8002084:	40022000 	.word	0x40022000
 8002088:	40022400 	.word	0x40022400
 800208c:	40013c00 	.word	0x40013c00

08002090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
 800209c:	4613      	mov	r3, r2
 800209e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020ac:	e003      	b.n	80020b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	041a      	lsls	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	619a      	str	r2, [r3, #24]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_PWREx_EnableOverDrive+0x98>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a22      	ldr	r2, [pc, #136]	; (800215c <HAL_PWREx_EnableOverDrive+0x98>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_PWREx_EnableOverDrive+0x98>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f2:	f7ff fb63 	bl	80017bc <HAL_GetTick>
 80020f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020f8:	e009      	b.n	800210e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020fa:	f7ff fb5f 	bl	80017bc <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002108:	d901      	bls.n	800210e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e022      	b.n	8002154 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211a:	d1ee      	bne.n	80020fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800211c:	4b10      	ldr	r3, [pc, #64]	; (8002160 <HAL_PWREx_EnableOverDrive+0x9c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0f      	ldr	r2, [pc, #60]	; (8002160 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002126:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002128:	f7ff fb48 	bl	80017bc <HAL_GetTick>
 800212c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800212e:	e009      	b.n	8002144 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002130:	f7ff fb44 	bl	80017bc <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800213e:	d901      	bls.n	8002144 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e007      	b.n	8002154 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002150:	d1ee      	bne.n	8002130 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800
 8002160:	40007000 	.word	0x40007000

08002164 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af02      	add	r7, sp, #8
 800216a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff fb26 	bl	80017bc <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e067      	b.n	800224c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10b      	bne.n	80021a0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7fe ff9f 	bl	80010d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002196:	f241 3188 	movw	r1, #5000	; 0x1388
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fb5f 	bl	800285e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	021a      	lsls	r2, r3, #8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	2120      	movs	r1, #32
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fb57 	bl	800287a <QSPI_WaitFlagStateUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80021d0:	7afb      	ldrb	r3, [r7, #11]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d135      	bne.n	8002242 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_QSPI_Init+0xf0>)
 80021de:	4013      	ands	r3, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6852      	ldr	r2, [r2, #4]
 80021e4:	0611      	lsls	r1, r2, #24
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68d2      	ldr	r2, [r2, #12]
 80021ea:	4311      	orrs	r1, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	69d2      	ldr	r2, [r2, #28]
 80021f0:	4311      	orrs	r1, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6a12      	ldr	r2, [r2, #32]
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_QSPI_Init+0xf4>)
 8002208:	4013      	ands	r3, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6912      	ldr	r2, [r2, #16]
 800220e:	0411      	lsls	r1, r2, #16
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6952      	ldr	r2, [r2, #20]
 8002214:	4311      	orrs	r1, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6992      	ldr	r2, [r2, #24]
 800221a:	4311      	orrs	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	430b      	orrs	r3, r1
 8002222:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800224a:	7afb      	ldrb	r3, [r7, #11]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	00ffff2f 	.word	0x00ffff2f
 8002258:	ffe0f8fe 	.word	0xffe0f8fe

0800225c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e016      	b.n	800229c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe ffb8 	bl	80011f4 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff fa84 	bl	80017bc <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_QSPI_Command+0x22>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e048      	b.n	8002358 <HAL_QSPI_Command+0xb4>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d137      	bne.n	800234a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	2200      	movs	r2, #0
 80022f0:	2120      	movs	r1, #32
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fac1 	bl	800287a <QSPI_WaitFlagStateUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d125      	bne.n	800234e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002302:	2200      	movs	r2, #0
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 faee 	bl	80028e8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	2b00      	cmp	r3, #0
 8002312:	d115      	bne.n	8002340 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2201      	movs	r2, #1
 800231c:	2102      	movs	r1, #2
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 faab 	bl	800287a <QSPI_WaitFlagStateUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10f      	bne.n	800234e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2202      	movs	r2, #2
 8002334:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800233e:	e006      	b.n	800234e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002348:	e001      	b.n	800234e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800234a:	2302      	movs	r3, #2
 800234c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002356:	7dfb      	ldrb	r3, [r7, #23]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff fa24 	bl	80017bc <HAL_GetTick>
 8002374:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3320      	adds	r3, #32
 800237c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_QSPI_Transmit+0x2e>
 800238a:	2302      	movs	r3, #2
 800238c:	e07b      	b.n	8002486 <HAL_QSPI_Transmit+0x126>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d16a      	bne.n	8002478 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d05b      	beq.n	8002466 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2212      	movs	r2, #18
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80023e2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80023e4:	e01b      	b.n	800241e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	2201      	movs	r2, #1
 80023ee:	2104      	movs	r1, #4
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fa42 	bl	800287a <QSPI_WaitFlagStateUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80023fa:	7ffb      	ldrb	r3, [r7, #31]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d113      	bne.n	8002428 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	1e5a      	subs	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1df      	bne.n	80023e6 <HAL_QSPI_Transmit+0x86>
 8002426:	e000      	b.n	800242a <HAL_QSPI_Transmit+0xca>
          break;
 8002428:	bf00      	nop
      }

      if (status == HAL_OK)
 800242a:	7ffb      	ldrb	r3, [r7, #31]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d115      	bne.n	800245c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2201      	movs	r2, #1
 8002438:	2102      	movs	r1, #2
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 fa1d 	bl	800287a <QSPI_WaitFlagStateUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002444:	7ffb      	ldrb	r3, [r7, #31]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d108      	bne.n	800245c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2202      	movs	r2, #2
 8002450:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f996 	bl	8002784 <HAL_QSPI_Abort>
 8002458:	4603      	mov	r3, r0
 800245a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002464:	e00a      	b.n	800247c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f043 0208 	orr.w	r2, r3, #8
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	77fb      	strb	r3, [r7, #31]
 8002476:	e001      	b.n	800247c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002478:	2302      	movs	r3, #2
 800247a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8002484:	7ffb      	ldrb	r3, [r7, #31]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b08a      	sub	sp, #40	; 0x28
 8002492:	af02      	add	r7, sp, #8
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800249e:	f7ff f98d 	bl	80017bc <HAL_GetTick>
 80024a2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3320      	adds	r3, #32
 80024b2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_QSPI_Receive+0x36>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e082      	b.n	80025ca <HAL_QSPI_Receive+0x13c>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d171      	bne.n	80025bc <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d062      	beq.n	80025aa <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2222      	movs	r2, #34	; 0x22
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800251c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002526:	e01c      	b.n	8002562 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2201      	movs	r2, #1
 8002530:	2106      	movs	r1, #6
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f9a1 	bl	800287a <QSPI_WaitFlagStateUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800253c:	7ffb      	ldrb	r3, [r7, #31]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d114      	bne.n	800256c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	7812      	ldrb	r2, [r2, #0]
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255c:	1e5a      	subs	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1de      	bne.n	8002528 <HAL_QSPI_Receive+0x9a>
 800256a:	e000      	b.n	800256e <HAL_QSPI_Receive+0xe0>
          break;
 800256c:	bf00      	nop
      }

      if (status == HAL_OK)
 800256e:	7ffb      	ldrb	r3, [r7, #31]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d115      	bne.n	80025a0 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2201      	movs	r2, #1
 800257c:	2102      	movs	r1, #2
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f97b 	bl	800287a <QSPI_WaitFlagStateUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8002588:	7ffb      	ldrb	r3, [r7, #31]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d108      	bne.n	80025a0 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2202      	movs	r2, #2
 8002594:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f8f4 	bl	8002784 <HAL_QSPI_Abort>
 800259c:	4603      	mov	r3, r0
 800259e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025a8:	e00a      	b.n	80025c0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f043 0208 	orr.w	r2, r3, #8
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	77fb      	strb	r3, [r7, #31]
 80025ba:	e001      	b.n	80025c0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
 80025be:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80025c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b088      	sub	sp, #32
 80025d6:	af02      	add	r7, sp, #8
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff f8ec 	bl	80017bc <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_QSPI_AutoPolling+0x24>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e060      	b.n	80026b8 <HAL_QSPI_AutoPolling+0xe6>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d14f      	bne.n	80026aa <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2242      	movs	r2, #66	; 0x42
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	2200      	movs	r2, #0
 8002620:	2120      	movs	r1, #32
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f929 	bl	800287a <QSPI_WaitFlagStateUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800262c:	7dfb      	ldrb	r3, [r7, #23]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d13d      	bne.n	80026ae <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6852      	ldr	r2, [r2, #4]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6892      	ldr	r2, [r2, #8]
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	431a      	orrs	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002668:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8002672:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f935 	bl	80028e8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2201      	movs	r2, #1
 8002686:	2108      	movs	r1, #8
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f8f6 	bl	800287a <QSPI_WaitFlagStateUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2208      	movs	r2, #8
 800269e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026a8:	e001      	b.n	80026ae <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
 80026ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff f876 	bl	80017bc <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_QSPI_MemoryMapped+0x22>
 80026de:	2302      	movs	r3, #2
 80026e0:	e04c      	b.n	800277c <HAL_QSPI_MemoryMapped+0xbc>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d13b      	bne.n	800276e <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2282      	movs	r2, #130	; 0x82
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	2200      	movs	r2, #0
 800270e:	2120      	movs	r1, #32
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f8b2 	bl	800287a <QSPI_WaitFlagStateUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800271a:	7dfb      	ldrb	r3, [r7, #23]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d128      	bne.n	8002772 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0108 	bic.w	r1, r3, #8
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b08      	cmp	r3, #8
 800273c:	d110      	bne.n	8002760 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2210      	movs	r2, #16
 800274e:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800275e:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8002760:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f8be 	bl	80028e8 <QSPI_Config>
 800276c:	e001      	b.n	8002772 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800276e:	2302      	movs	r3, #2
 8002770:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800277a:	7dfb      	ldrb	r3, [r7, #23]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af02      	add	r7, sp, #8
 800278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff f814 	bl	80017bc <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d056      	beq.n	8002854 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d017      	beq.n	80027ec <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0204 	bic.w	r2, r2, #4
 80027ca:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff f934 	bl	8001a3e <HAL_DMA_Abort>
 80027d6:	4603      	mov	r3, r0
 80027d8:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f043 0204 	orr.w	r2, r3, #4
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0202 	orr.w	r2, r2, #2
 80027fa:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2201      	movs	r2, #1
 8002806:	2102      	movs	r1, #2
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f836 	bl	800287a <QSPI_WaitFlagStateUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10e      	bne.n	8002836 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2202      	movs	r2, #2
 800281e:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2200      	movs	r2, #0
 800282a:	2120      	movs	r1, #32
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f824 	bl	800287a <QSPI_WaitFlagStateUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10b      	bne.n	8002854 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800284a:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	649a      	str	r2, [r3, #72]	; 0x48
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800288a:	e01a      	b.n	80028c2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	d016      	beq.n	80028c2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002894:	f7fe ff92 	bl	80017bc <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d302      	bcc.n	80028aa <QSPI_WaitFlagStateUntilTimeout+0x30>
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10b      	bne.n	80028c2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2204      	movs	r2, #4
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e00e      	b.n	80028e0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf14      	ite	ne
 80028d0:	2301      	movne	r3, #1
 80028d2:	2300      	moveq	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d1d6      	bne.n	800288c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <QSPI_Config+0x28>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002902:	d005      	beq.n	8002910 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3a01      	subs	r2, #1
 800290e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80b9 	beq.w	8002a8c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d05f      	beq.n	80029e2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	6892      	ldr	r2, [r2, #8]
 800292a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d031      	beq.n	8002998 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	431a      	orrs	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002942:	431a      	orrs	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	431a      	orrs	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	049b      	lsls	r3, r3, #18
 8002950:	431a      	orrs	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	431a      	orrs	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	431a      	orrs	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	431a      	orrs	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	431a      	orrs	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	431a      	orrs	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	ea42 0103 	orr.w	r1, r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	430a      	orrs	r2, r1
 8002980:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002988:	f000 812e 	beq.w	8002be8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	6852      	ldr	r2, [r2, #4]
 8002994:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002996:	e127      	b.n	8002be8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	431a      	orrs	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	431a      	orrs	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	431a      	orrs	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	049b      	lsls	r3, r3, #18
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	431a      	orrs	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	ea42 0103 	orr.w	r1, r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	430a      	orrs	r2, r1
 80029de:	615a      	str	r2, [r3, #20]
}
 80029e0:	e102      	b.n	8002be8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d02e      	beq.n	8002a48 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	431a      	orrs	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	431a      	orrs	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	049b      	lsls	r3, r3, #18
 8002a06:	431a      	orrs	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	ea42 0103 	orr.w	r1, r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002a38:	f000 80d6 	beq.w	8002be8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	6852      	ldr	r2, [r2, #4]
 8002a44:	619a      	str	r2, [r3, #24]
}
 8002a46:	e0cf      	b.n	8002be8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	431a      	orrs	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a56:	431a      	orrs	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	049b      	lsls	r3, r3, #18
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	ea42 0103 	orr.w	r1, r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	615a      	str	r2, [r3, #20]
}
 8002a8a:	e0ad      	b.n	8002be8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d058      	beq.n	8002b46 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	6892      	ldr	r2, [r2, #8]
 8002a9c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d02d      	beq.n	8002b02 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	431a      	orrs	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	049b      	lsls	r3, r3, #18
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	ea42 0103 	orr.w	r1, r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002af4:	d078      	beq.n	8002be8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	6852      	ldr	r2, [r2, #4]
 8002afe:	619a      	str	r2, [r3, #24]
}
 8002b00:	e072      	b.n	8002be8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	431a      	orrs	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	049b      	lsls	r3, r3, #18
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	ea42 0103 	orr.w	r1, r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	615a      	str	r2, [r3, #20]
}
 8002b44:	e050      	b.n	8002be8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d02a      	beq.n	8002ba4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	431a      	orrs	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	431a      	orrs	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	049b      	lsls	r3, r3, #18
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	ea42 0103 	orr.w	r1, r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002b96:	d027      	beq.n	8002be8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	6852      	ldr	r2, [r2, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
}
 8002ba2:	e021      	b.n	8002be8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01d      	beq.n	8002be8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	049b      	lsls	r3, r3, #18
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	ea42 0103 	orr.w	r1, r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	615a      	str	r2, [r3, #20]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e291      	b.n	800312e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8087 	beq.w	8002d26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c18:	4b96      	ldr	r3, [pc, #600]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d00c      	beq.n	8002c3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c24:	4b93      	ldr	r3, [pc, #588]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d112      	bne.n	8002c56 <HAL_RCC_OscConfig+0x62>
 8002c30:	4b90      	ldr	r3, [pc, #576]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c3c:	d10b      	bne.n	8002c56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3e:	4b8d      	ldr	r3, [pc, #564]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d06c      	beq.n	8002d24 <HAL_RCC_OscConfig+0x130>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d168      	bne.n	8002d24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e26b      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_OscConfig+0x7a>
 8002c60:	4b84      	ldr	r3, [pc, #528]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a83      	ldr	r2, [pc, #524]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	e02e      	b.n	8002ccc <HAL_RCC_OscConfig+0xd8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x9c>
 8002c76:	4b7f      	ldr	r3, [pc, #508]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7e      	ldr	r2, [pc, #504]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b7c      	ldr	r3, [pc, #496]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7b      	ldr	r2, [pc, #492]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e01d      	b.n	8002ccc <HAL_RCC_OscConfig+0xd8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0xc0>
 8002c9a:	4b76      	ldr	r3, [pc, #472]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a75      	ldr	r2, [pc, #468]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b73      	ldr	r3, [pc, #460]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a72      	ldr	r2, [pc, #456]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0xd8>
 8002cb4:	4b6f      	ldr	r3, [pc, #444]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6e      	ldr	r2, [pc, #440]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b6c      	ldr	r3, [pc, #432]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a6b      	ldr	r2, [pc, #428]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fd72 	bl	80017bc <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7fe fd6e 	bl	80017bc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	; 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e21f      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b61      	ldr	r3, [pc, #388]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0xe8>
 8002cfa:	e014      	b.n	8002d26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fd5e 	bl	80017bc <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fe fd5a 	bl	80017bc <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	; 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e20b      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d16:	4b57      	ldr	r3, [pc, #348]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x110>
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d069      	beq.n	8002e06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d32:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3e:	4b4d      	ldr	r3, [pc, #308]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d11c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x190>
 8002d4a:	4b4a      	ldr	r3, [pc, #296]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d116      	bne.n	8002d84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d56:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_RCC_OscConfig+0x17a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e1df      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6e:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	493d      	ldr	r1, [pc, #244]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d82:	e040      	b.n	8002e06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d023      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d8c:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a38      	ldr	r2, [pc, #224]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fd10 	bl	80017bc <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da0:	f7fe fd0c 	bl	80017bc <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e1bd      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db2:	4b30      	ldr	r3, [pc, #192]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbe:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4929      	ldr	r1, [pc, #164]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
 8002dd2:	e018      	b.n	8002e06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd4:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe fcec 	bl	80017bc <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de8:	f7fe fce8 	bl	80017bc <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e199      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d038      	beq.n	8002e84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d019      	beq.n	8002e4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1a:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1e:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e26:	f7fe fcc9 	bl	80017bc <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2e:	f7fe fcc5 	bl	80017bc <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e176      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x23a>
 8002e4c:	e01a      	b.n	8002e84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e52:	4a08      	ldr	r2, [pc, #32]	; (8002e74 <HAL_RCC_OscConfig+0x280>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fcaf 	bl	80017bc <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e62:	f7fe fcab 	bl	80017bc <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d903      	bls.n	8002e78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e15c      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
 8002e74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e78:	4b91      	ldr	r3, [pc, #580]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ee      	bne.n	8002e62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80a4 	beq.w	8002fda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e92:	4b8b      	ldr	r3, [pc, #556]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10d      	bne.n	8002eba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9e:	4b88      	ldr	r3, [pc, #544]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a87      	ldr	r2, [pc, #540]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b85      	ldr	r3, [pc, #532]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eba:	4b82      	ldr	r3, [pc, #520]	; (80030c4 <HAL_RCC_OscConfig+0x4d0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d118      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ec6:	4b7f      	ldr	r3, [pc, #508]	; (80030c4 <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a7e      	ldr	r2, [pc, #504]	; (80030c4 <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fc73 	bl	80017bc <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eda:	f7fe fc6f 	bl	80017bc <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b64      	cmp	r3, #100	; 0x64
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e120      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eec:	4b75      	ldr	r3, [pc, #468]	; (80030c4 <HAL_RCC_OscConfig+0x4d0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d106      	bne.n	8002f0e <HAL_RCC_OscConfig+0x31a>
 8002f00:	4b6f      	ldr	r3, [pc, #444]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	4a6e      	ldr	r2, [pc, #440]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0c:	e02d      	b.n	8002f6a <HAL_RCC_OscConfig+0x376>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x33c>
 8002f16:	4b6a      	ldr	r3, [pc, #424]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	4a69      	ldr	r2, [pc, #420]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	6713      	str	r3, [r2, #112]	; 0x70
 8002f22:	4b67      	ldr	r3, [pc, #412]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	4a66      	ldr	r2, [pc, #408]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f28:	f023 0304 	bic.w	r3, r3, #4
 8002f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2e:	e01c      	b.n	8002f6a <HAL_RCC_OscConfig+0x376>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d10c      	bne.n	8002f52 <HAL_RCC_OscConfig+0x35e>
 8002f38:	4b61      	ldr	r3, [pc, #388]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	4a60      	ldr	r2, [pc, #384]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	6713      	str	r3, [r2, #112]	; 0x70
 8002f44:	4b5e      	ldr	r3, [pc, #376]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	4a5d      	ldr	r2, [pc, #372]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f50:	e00b      	b.n	8002f6a <HAL_RCC_OscConfig+0x376>
 8002f52:	4b5b      	ldr	r3, [pc, #364]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a5a      	ldr	r2, [pc, #360]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5e:	4b58      	ldr	r3, [pc, #352]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	4a57      	ldr	r2, [pc, #348]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d015      	beq.n	8002f9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7fe fc23 	bl	80017bc <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fe fc1f 	bl	80017bc <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e0ce      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f90:	4b4b      	ldr	r3, [pc, #300]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ee      	beq.n	8002f7a <HAL_RCC_OscConfig+0x386>
 8002f9c:	e014      	b.n	8002fc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9e:	f7fe fc0d 	bl	80017bc <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa6:	f7fe fc09 	bl	80017bc <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e0b8      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbc:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ee      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d105      	bne.n	8002fda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fce:	4b3c      	ldr	r3, [pc, #240]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	4a3b      	ldr	r2, [pc, #236]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80a4 	beq.w	800312c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe4:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d06b      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d149      	bne.n	800308c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff8:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a30      	ldr	r2, [pc, #192]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe fbda 	bl	80017bc <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe fbd6 	bl	80017bc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e087      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	019b      	lsls	r3, r3, #6
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	085b      	lsrs	r3, r3, #1
 8003042:	3b01      	subs	r3, #1
 8003044:	041b      	lsls	r3, r3, #16
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	061b      	lsls	r3, r3, #24
 800304e:	4313      	orrs	r3, r2
 8003050:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8003052:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003056:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 800305e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe fbaa 	bl	80017bc <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe fba6 	bl	80017bc <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e057      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x478>
 800308a:	e04f      	b.n	800312c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8003092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fb90 	bl	80017bc <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fe fb8c 	bl	80017bc <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e03d      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4ac>
 80030be:	e035      	b.n	800312c <HAL_RCC_OscConfig+0x538>
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030c8:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_RCC_OscConfig+0x544>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d028      	beq.n	8003128 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d121      	bne.n	8003128 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d11a      	bne.n	8003128 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030f8:	4013      	ands	r3, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003100:	4293      	cmp	r3, r2
 8003102:	d111      	bne.n	8003128 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	085b      	lsrs	r3, r3, #1
 8003110:	3b01      	subs	r3, #1
 8003112:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d107      	bne.n	8003128 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800

0800313c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0d0      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003154:	4b6a      	ldr	r3, [pc, #424]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d910      	bls.n	8003184 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b67      	ldr	r3, [pc, #412]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 020f 	bic.w	r2, r3, #15
 800316a:	4965      	ldr	r1, [pc, #404]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b63      	ldr	r3, [pc, #396]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0b8      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800319c:	4b59      	ldr	r3, [pc, #356]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4a58      	ldr	r2, [pc, #352]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80031a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b4:	4b53      	ldr	r3, [pc, #332]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4a52      	ldr	r2, [pc, #328]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80031ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c0:	4b50      	ldr	r3, [pc, #320]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	494d      	ldr	r1, [pc, #308]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d040      	beq.n	8003260 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d107      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d115      	bne.n	800321e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e07f      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fe:	4b41      	ldr	r3, [pc, #260]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e073      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e06b      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321e:	4b39      	ldr	r3, [pc, #228]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f023 0203 	bic.w	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4936      	ldr	r1, [pc, #216]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	4313      	orrs	r3, r2
 800322e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003230:	f7fe fac4 	bl	80017bc <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003236:	e00a      	b.n	800324e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003238:	f7fe fac0 	bl	80017bc <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e053      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 020c 	and.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	429a      	cmp	r2, r3
 800325e:	d1eb      	bne.n	8003238 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003260:	4b27      	ldr	r3, [pc, #156]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d210      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 020f 	bic.w	r2, r3, #15
 8003276:	4922      	ldr	r1, [pc, #136]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e032      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800329c:	4b19      	ldr	r3, [pc, #100]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4916      	ldr	r1, [pc, #88]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	490e      	ldr	r1, [pc, #56]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032ce:	f000 f821 	bl	8003314 <HAL_RCC_GetSysClockFreq>
 80032d2:	4602      	mov	r2, r0
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	490a      	ldr	r1, [pc, #40]	; (8003308 <HAL_RCC_ClockConfig+0x1cc>)
 80032e0:	5ccb      	ldrb	r3, [r1, r3]
 80032e2:	fa22 f303 	lsr.w	r3, r2, r3
 80032e6:	4a09      	ldr	r2, [pc, #36]	; (800330c <HAL_RCC_ClockConfig+0x1d0>)
 80032e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCC_ClockConfig+0x1d4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe fa20 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023c00 	.word	0x40023c00
 8003304:	40023800 	.word	0x40023800
 8003308:	080034f0 	.word	0x080034f0
 800330c:	20000000 	.word	0x20000000
 8003310:	20000004 	.word	0x20000004

08003314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003314:	b5b0      	push	{r4, r5, r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800331a:	2100      	movs	r1, #0
 800331c:	6079      	str	r1, [r7, #4]
 800331e:	2100      	movs	r1, #0
 8003320:	60f9      	str	r1, [r7, #12]
 8003322:	2100      	movs	r1, #0
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003326:	2100      	movs	r1, #0
 8003328:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800332a:	4952      	ldr	r1, [pc, #328]	; (8003474 <HAL_RCC_GetSysClockFreq+0x160>)
 800332c:	6889      	ldr	r1, [r1, #8]
 800332e:	f001 010c 	and.w	r1, r1, #12
 8003332:	2908      	cmp	r1, #8
 8003334:	d00d      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x3e>
 8003336:	2908      	cmp	r1, #8
 8003338:	f200 8094 	bhi.w	8003464 <HAL_RCC_GetSysClockFreq+0x150>
 800333c:	2900      	cmp	r1, #0
 800333e:	d002      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0x32>
 8003340:	2904      	cmp	r1, #4
 8003342:	d003      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x38>
 8003344:	e08e      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003346:	4b4c      	ldr	r3, [pc, #304]	; (8003478 <HAL_RCC_GetSysClockFreq+0x164>)
 8003348:	60bb      	str	r3, [r7, #8]
      break;
 800334a:	e08e      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800334c:	4b4b      	ldr	r3, [pc, #300]	; (800347c <HAL_RCC_GetSysClockFreq+0x168>)
 800334e:	60bb      	str	r3, [r7, #8]
      break;
 8003350:	e08b      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003352:	4948      	ldr	r1, [pc, #288]	; (8003474 <HAL_RCC_GetSysClockFreq+0x160>)
 8003354:	6849      	ldr	r1, [r1, #4]
 8003356:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800335a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800335c:	4945      	ldr	r1, [pc, #276]	; (8003474 <HAL_RCC_GetSysClockFreq+0x160>)
 800335e:	6849      	ldr	r1, [r1, #4]
 8003360:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003364:	2900      	cmp	r1, #0
 8003366:	d024      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003368:	4942      	ldr	r1, [pc, #264]	; (8003474 <HAL_RCC_GetSysClockFreq+0x160>)
 800336a:	6849      	ldr	r1, [r1, #4]
 800336c:	0989      	lsrs	r1, r1, #6
 800336e:	4608      	mov	r0, r1
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003378:	f04f 0500 	mov.w	r5, #0
 800337c:	ea00 0204 	and.w	r2, r0, r4
 8003380:	ea01 0305 	and.w	r3, r1, r5
 8003384:	493d      	ldr	r1, [pc, #244]	; (800347c <HAL_RCC_GetSysClockFreq+0x168>)
 8003386:	fb01 f003 	mul.w	r0, r1, r3
 800338a:	2100      	movs	r1, #0
 800338c:	fb01 f102 	mul.w	r1, r1, r2
 8003390:	1844      	adds	r4, r0, r1
 8003392:	493a      	ldr	r1, [pc, #232]	; (800347c <HAL_RCC_GetSysClockFreq+0x168>)
 8003394:	fba2 0101 	umull	r0, r1, r2, r1
 8003398:	1863      	adds	r3, r4, r1
 800339a:	4619      	mov	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	461a      	mov	r2, r3
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	f7fc ff30 	bl	8000208 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4613      	mov	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	e04a      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b2:	4b30      	ldr	r3, [pc, #192]	; (8003474 <HAL_RCC_GetSysClockFreq+0x160>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	461a      	mov	r2, r3
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	ea02 0400 	and.w	r4, r2, r0
 80033ca:	ea03 0501 	and.w	r5, r3, r1
 80033ce:	4620      	mov	r0, r4
 80033d0:	4629      	mov	r1, r5
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	014b      	lsls	r3, r1, #5
 80033dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033e0:	0142      	lsls	r2, r0, #5
 80033e2:	4610      	mov	r0, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	1b00      	subs	r0, r0, r4
 80033e8:	eb61 0105 	sbc.w	r1, r1, r5
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	018b      	lsls	r3, r1, #6
 80033f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033fa:	0182      	lsls	r2, r0, #6
 80033fc:	1a12      	subs	r2, r2, r0
 80033fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003402:	f04f 0000 	mov.w	r0, #0
 8003406:	f04f 0100 	mov.w	r1, #0
 800340a:	00d9      	lsls	r1, r3, #3
 800340c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003410:	00d0      	lsls	r0, r2, #3
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	1912      	adds	r2, r2, r4
 8003418:	eb45 0303 	adc.w	r3, r5, r3
 800341c:	f04f 0000 	mov.w	r0, #0
 8003420:	f04f 0100 	mov.w	r1, #0
 8003424:	0299      	lsls	r1, r3, #10
 8003426:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800342a:	0290      	lsls	r0, r2, #10
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	461a      	mov	r2, r3
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	f7fc fee4 	bl	8000208 <__aeabi_uldivmod>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4613      	mov	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <HAL_RCC_GetSysClockFreq+0x160>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	3301      	adds	r3, #1
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	60bb      	str	r3, [r7, #8]
      break;
 8003462:	e002      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <HAL_RCC_GetSysClockFreq+0x164>)
 8003466:	60bb      	str	r3, [r7, #8]
      break;
 8003468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346a:	68bb      	ldr	r3, [r7, #8]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bdb0      	pop	{r4, r5, r7, pc}
 8003474:	40023800 	.word	0x40023800
 8003478:	00f42400 	.word	0x00f42400
 800347c:	017d7840 	.word	0x017d7840

08003480 <__libc_init_array>:
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	4d0d      	ldr	r5, [pc, #52]	; (80034b8 <__libc_init_array+0x38>)
 8003484:	4c0d      	ldr	r4, [pc, #52]	; (80034bc <__libc_init_array+0x3c>)
 8003486:	1b64      	subs	r4, r4, r5
 8003488:	10a4      	asrs	r4, r4, #2
 800348a:	2600      	movs	r6, #0
 800348c:	42a6      	cmp	r6, r4
 800348e:	d109      	bne.n	80034a4 <__libc_init_array+0x24>
 8003490:	4d0b      	ldr	r5, [pc, #44]	; (80034c0 <__libc_init_array+0x40>)
 8003492:	4c0c      	ldr	r4, [pc, #48]	; (80034c4 <__libc_init_array+0x44>)
 8003494:	f000 f820 	bl	80034d8 <_init>
 8003498:	1b64      	subs	r4, r4, r5
 800349a:	10a4      	asrs	r4, r4, #2
 800349c:	2600      	movs	r6, #0
 800349e:	42a6      	cmp	r6, r4
 80034a0:	d105      	bne.n	80034ae <__libc_init_array+0x2e>
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
 80034a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a8:	4798      	blx	r3
 80034aa:	3601      	adds	r6, #1
 80034ac:	e7ee      	b.n	800348c <__libc_init_array+0xc>
 80034ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b2:	4798      	blx	r3
 80034b4:	3601      	adds	r6, #1
 80034b6:	e7f2      	b.n	800349e <__libc_init_array+0x1e>
 80034b8:	08003508 	.word	0x08003508
 80034bc:	08003508 	.word	0x08003508
 80034c0:	08003508 	.word	0x08003508
 80034c4:	0800350c 	.word	0x0800350c

080034c8 <memset>:
 80034c8:	4402      	add	r2, r0
 80034ca:	4603      	mov	r3, r0
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d100      	bne.n	80034d2 <memset+0xa>
 80034d0:	4770      	bx	lr
 80034d2:	f803 1b01 	strb.w	r1, [r3], #1
 80034d6:	e7f9      	b.n	80034cc <memset+0x4>

080034d8 <_init>:
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034da:	bf00      	nop
 80034dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034de:	bc08      	pop	{r3}
 80034e0:	469e      	mov	lr, r3
 80034e2:	4770      	bx	lr

080034e4 <_fini>:
 80034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e6:	bf00      	nop
 80034e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ea:	bc08      	pop	{r3}
 80034ec:	469e      	mov	lr, r3
 80034ee:	4770      	bx	lr
